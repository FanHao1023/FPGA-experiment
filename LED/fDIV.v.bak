module fDIV( fin, sel, reset, fout);
input fin,reset;
input[3:0] sel;
output fout;
reg fout0;
wire _fout;
wire[31:0] _Divn, ncount;
reg [31:0] Divn;
reg[31:0] count;

//always @ (sel)
	//case(sel)
	//4'd0 : Divn <= 32'd25000000;
	//4'd1 : Divn <= 32'd12500000;
	//4'd2 : Divn <= 32'd6250000;
	//4'd3 : Divn <= 32'd3125000;
	//default : Divn <= 32'd1;
	//endcase
	
always @ (sel)
	case(sel)
	4'd0 : Divn <= 32'd2;
	4'd1 : Divn <= 32'd4;
	4'd2 : Divn <= 32'd6;
	4'd3 : Divn <= 32'd8;
	default : Divn <= 32'd1;
	endcase
	
assign _Divn={1'b0,Divn[31:1]};

always@(posedge fin)
begin
count <= ncount;
fout0 <= _fout;
end

assign ncount=(count>=Divn)?32'd1:count+1;
assign _fout=(count>_Divn)?1'b1:1'b0;
assign fout=(reset==1'b1)?1'b0:(Divn<8'd2)?fin:fout0;

endmodule